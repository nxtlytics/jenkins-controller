agent:
  privileged: true
  alwaysPullImage: false
controller:
  image: $(jenkins-image-repository)
  tag: $(jenkins-image-tag)
  imagePullPolicy: IfNotPresent
  adminSecret: false
  enableRawHtmlMarkupFormatter: true
  installPlugins: []
  additionalSecrets:
    - name: github-api-token
      value: $((github-api-token))
    - name: sonarqube-token
      value: $((sonarqube-token))
    - name: sonarqube-url
      value: $((sonarqube-url))
    - name: slack-url
      value: $((slack-url))
    - name: slack-token
      value: $((slack-token))
    - name: azure-ad-client-id
      value: $((azure-ad-client-id))
    - name: azure-ad-client-secret
      value: $((azure-ad-client-secret))
    - name: azure-ad-tenant-id
      value: $((azure-ad-tenant-id))
  ingress:
    enabled: true
    hostName: $((jenkins-hostname))
  secondaryingress:
    enabled: false
  prometheus:
    enabled: true
  jenkinsUrlProtocol: $((http-protocol))
  jenkinsAdminEmail: $((jenkins-email))
  initScripts:
    - |-
      #!/usr/bin/env groovy
      /*
       * This script configures the timezone in Jenkins
       */
      println("=== Configure timezone in Jenkins")
      System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Etc/UTC')
    - |-
      #!/usr/bin/env groovy
      import jenkins.model.Jenkins
      import jenkins.security.QueueItemAuthenticatorConfiguration
      import hudson.model.*
      import org.jenkinsci.plugins.authorizeproject.GlobalQueueItemAuthenticator
      import org.jenkinsci.plugins.authorizeproject.strategy.SystemAuthorizationStrategy

      println("=== Configure Authorize Project")
      GlobalQueueItemAuthenticator auth = new GlobalQueueItemAuthenticator(
          new SystemAuthorizationStrategy()
      )
      QueueItemAuthenticatorConfiguration.get().authenticators.add(auth)
  JCasC:
    enabled: true
    # defaultConfig -> https://github.com/jenkinsci/helm-charts/blob/9b0cbbe5bb4b3f77785e92c7f44445795f8ec754/charts/jenkins/templates/_helpers.tpl#L96-L196
    defaultConfig: true
    securityRealm: |-
      azure:
        clientid: ${azure-ad-client-id}
        clientsecret: ${azure-ad-client-secret}
        tenant: ${azure-ad-tenant-id}
        cacheduration: 0
        fromrequest: true
    authorizationStrategy: |-
      azureAdMatrix:
        permissions:
          - "Overall/Read:$((azure-ad-read-group))"
          - "Job/Build:$((azure-ad-read-group))"
          - "Agent/Build:$((azure-ad-read-group))"
          - "Overall/Administer:$((azure-ad-admin-group))"
    configScripts:
      00-base-config: |
        jenkins:
          systemMessage: |
            <h1>Welcome to our build server.</h1>

            <p>This Jenkins is 100% configured and managed 'as code'.<br>
            Config is now mostly handled by the 'Jenkins Configuration as Code' (JCasC) plugin.<br>
            JCasC config can be found in the <code>/usr/share/jenkins/ref/casc_configs</code> folder.</p>

            <p>Some settings are still injected from <code>/usr/share/jenkins/ref/init.groovy.d/</code> scripts,<br>
            but these settings will be ported over to JCasC as support becomes available.<br>
            See <a href="https://github.com/nxtlytics/jenkins-master">https://github.com/nxtlytics/jenkins-master</a> for more</p>
        unclassified:
          themeManager:
            disableUserThemes: true
            theme: "darkSystem" # use 'dark' for forcing the dark theme regardless of OS settings
      01-github: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  description: "Github API Key"
                  id: "github-api-token"
                  scope: GLOBAL
                  secret: ${github-api-token}
              - usernamePassword:
                  id: "github-api-username"
                  scope: GLOBAL
                  username: github-user
                  password: ${github-api-token}
        unclassified:
          githubpluginconfig:
            hookUrl: {{ template "jenkins.url" . }}/github-webhook/
            configs:
            - apiUrl: "https://api.github.com"
              credentialsId: "github-api-token"
              name: "GitHub"
              manageHooks: true
          globalLibraries:
            libraries:
              - name: "jenkins-library"
                defaultVersion: $(jenkins-library-version)
                retriever:
                  modernSCM:
                    scm:
                      github:
                        repoOwner: $(jenkins-library-repo-owner)
                        repository: $(jenkins-library-repo-name)
                        credentialsId: "github-api-username"
      02-sonarqube: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  description: "SonarQube Token"
                  id: "sonarqube-token"
                  scope: GLOBAL
                  secret: ${sonarqube-token}
        unclassified:
          sonarglobalconfiguration:
            buildWrapperEnabled: true
            installations:
              - name: "sonarqube"
                serverUrl: ${sonarqube-url}
                credentialsId: sonarqube-token
      03-slack: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  description: "Slack Webhook URL"
                  id: "slack-url"
                  scope: GLOBAL
                  secret: ${slack-url}
              - string:
                  description: "Slack Token"
                  id: "slack-token"
                  scope: GLOBAL
                  secret: ${slack-token}
        unclassified:
          slackNotifier:
            teamDomain: $((slack-team-domain))
            tokenCredentialId: slack-token
